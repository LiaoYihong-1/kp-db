[{"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\index.js":"1","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\App.jsx":"2","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\login\\login.jsx":"3","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\register\\register.jsx":"4","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\main.jsx":"5","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainPerson.jsx":"6","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainHouse.jsx":"7","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\houseTools.jsx":"8","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainScript.jsx":"9","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainReport.jsx":"10","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\reportTool.jsx":"11","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\shcduleTools.jsx":"12","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainSchedule.jsx":"13","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\scriptTools.jsx":"14","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\addAction.jsx":"15"},{"size":259,"mtime":1696242941533,"results":"16","hashOfConfig":"17"},{"size":634,"mtime":1696242941510,"results":"18","hashOfConfig":"17"},{"size":6533,"mtime":1709300177490,"results":"19","hashOfConfig":"17"},{"size":8727,"mtime":1696436245765,"results":"20","hashOfConfig":"17"},{"size":7895,"mtime":1696375520841,"results":"21","hashOfConfig":"17"},{"size":2247,"mtime":1709304985951,"results":"22","hashOfConfig":"17"},{"size":24621,"mtime":1709306209188,"results":"23","hashOfConfig":"17"},{"size":12222,"mtime":1696441194323,"results":"24","hashOfConfig":"17"},{"size":9129,"mtime":1696242941527,"results":"25","hashOfConfig":"17"},{"size":4460,"mtime":1696242941522,"results":"26","hashOfConfig":"17"},{"size":6468,"mtime":1696242941527,"results":"27","hashOfConfig":"17"},{"size":8653,"mtime":1696242941510,"results":"28","hashOfConfig":"17"},{"size":9158,"mtime":1696242941526,"results":"29","hashOfConfig":"17"},{"size":8712,"mtime":1696242941530,"results":"30","hashOfConfig":"17"},{"size":5633,"mtime":1696436634250,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1h5y8wq",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\index.js",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\App.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\login\\login.jsx",["66","67","68"],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\register\\register.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\main.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainPerson.jsx",["69","70","71","72"],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainHouse.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\houseTools.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainScript.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainReport.jsx",["73"],"import Typography from \"@material-ui/core/Typography\";\r\nimport React, {useEffect, useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport $ from \"jquery\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        minWidth: 650,\r\n    },\r\n});\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n    return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n    createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n    createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n    createData('Eclair', 262, 16.0, 24, 6.0),\r\n    createData('Cupcake', 305, 3.7, 67, 4.3),\r\n    createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nfunction BasicTable() {\r\n    const classes = useStyles();\r\n    const [gotten,setGotten] = useState(false);\r\n    function getProblems(){\r\n        $.ajax({\r\n                url: \"api/getproblems\",\r\n                method:\"POST\",\r\n                data:{\r\n                    id:window.sessionStorage.getItem(\"id\")\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res.length > 0){\r\n                        rows.length = 0;\r\n                        for(var i in res){\r\n                            if(res.is_finished) {\r\n                                rows.push({\r\n                                    problem_id: res[i].id,\r\n                                    support: res[i].support_man_id,\r\n                                    problem_type: res[i].problem_type,\r\n                                    description: res[i].description,\r\n                                    date: res[i].date,\r\n                                    finished: \"finished\"\r\n                                })\r\n                            }else{\r\n                                rows.push({\r\n                                    problem_id: res[i].id,\r\n                                    support: res[i].support_man_id,\r\n                                    problem_type: res[i].problem_type,\r\n                                    description: res[i].description,\r\n                                    date: res[i].date,\r\n                                    finished: \"on process\"\r\n                                })\r\n                            }\r\n                        }\r\n                        setGotten(true);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(!gotten){\r\n            getProblems()\r\n        }\r\n    });\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table className={classes.table} aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>Problem id</TableCell>\r\n                        <TableCell align=\"right\">description</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Support id</TableCell>\r\n                        <TableCell align=\"right\">Problem type</TableCell>\r\n                        <TableCell align=\"right\">status</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rows.map((row) => (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.problem_id}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.description}</TableCell>\r\n                            <TableCell align=\"right\">{row.date}</TableCell>\r\n                            <TableCell align=\"right\">{row.support}</TableCell>\r\n                            <TableCell align=\"right\">{row.problem_type}</TableCell>\r\n                            <TableCell align=\"right\">{row.finished}</TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n\r\nexport default function MainReport(){\r\n    return(\r\n        <BasicTable/>\r\n    )\r\n}","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\reportTool.jsx",["74"],"import React, {useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport $ from \"jquery\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst useStylesForm = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\nfunction ReportProblem (){\r\n    const classes = useStylesForm();\r\n    const problem_types = ['','UI', 'BUGS', 'SCRIPT'];\r\n    const [state,setState] = useState({\r\n        problem_type: '',\r\n        description: '',\r\n    })\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    function sendAccount(problem_type,description){\r\n        $.ajax({\r\n                url: \"api/report\",\r\n                method:\"POST\",\r\n                data:{\r\n                    problem_type:problem_type,\r\n                    description:description,\r\n                    user_id:window.sessionStorage.getItem(\"id\")\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res){\r\n                        alert('Question accquired. It will be fixed soon.')\r\n                    }else {\r\n                        //dispatch(clearAccount());\r\n                        alert('Make sure you didn\\'t send an empty description or type');\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Report question\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                onChange={handleChange}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"description\"\r\n                                label=\"Description\"\r\n                                id=\"description\"\r\n                                autoComplete=\"current-description\"\r\n                            />\r\n                        </Grid>\r\n                        <FormControl className={classes.margin}>\r\n                            <InputLabel id=\"demo-customized-select-label\">problem type</InputLabel>\r\n                            <Select\r\n                                native\r\n                                value={state.problem_type}\r\n                                onChange={handleChange}\r\n                                inputProps={{\r\n                                    name: 'problem_type',\r\n                                    id: 'type-native-simple',\r\n                                }}\r\n                            >\r\n                                {\r\n                                    problem_types.map(item=>(\r\n                                        <option value={item}>{item}</option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={()=>sendAccount(state.problem_type,state.description)}\r\n                    >\r\n                        Report question\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\nfunction TransitionsModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button type=\"button\" onClick={handleOpen} color={\"inherit\"}>\r\n                Report question\r\n            </Button>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <ReportProblem/>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ReportTool(){\r\n    return(\r\n        <TransitionsModal/>\r\n    )\r\n}","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\shcduleTools.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\mainSchedule.jsx",[],"C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\scriptTools.jsx",["75","76","77"],"import React, {useState} from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport $ from \"jquery\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport Fade from \"@material-ui/core/Fade\";\r\nconst useStyles = makeStyles((theme) => ({\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    paper: {\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n        padding: theme.spacing(2, 4, 3),\r\n    },\r\n}));\r\nconst useStylesForm = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\nfunction AddCondition() {\r\n    const classes = useStylesForm();\r\n    const [state,setState] = useState({\r\n        condition:''\r\n    })\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    function addCondition(condition){\r\n        $.ajax({\r\n                url: \"api/addscript\",\r\n                method:\"POST\",\r\n                data:{\r\n                    condition:condition,\r\n                    user_id: sessionStorage.getItem(\"id\"),\r\n                    type:'condition'\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res.success){\r\n                        alert('success')\r\n                    }else {\r\n                        //dispatch(clearAccount());\r\n                        alert(res.message);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Add Conditional Script\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                onChange={handleChange}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"condition\"\r\n                                label=\"Condition\"\r\n                                id=\"condition\"\r\n                                autoComplete=\"current-condition\"\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={()=>{addCondition(state.condition);}}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\nfunction AddShare() {\r\n    const classes = useStylesForm();\r\n    const [state,setState] = useState({\r\n        share:''\r\n    })\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    function addShare(share){\r\n        $.ajax({\r\n                url: \"api/share\",\r\n                method:\"POST\",\r\n                data:{\r\n                    shareid:share,\r\n                    user_id: sessionStorage.getItem(\"id\"),\r\n                    type:'condition'\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res.success){\r\n                        alert('success')\r\n                    }else {\r\n                        //dispatch(clearAccount());\r\n                        alert(res.message);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Share Other's Script\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={12}>\r\n                            <TextField\r\n                                onChange={handleChange}\r\n                                variant=\"outlined\"\r\n                                required\r\n                                fullWidth\r\n                                name=\"share\"\r\n                                label=\"Share id\"\r\n                                id=\"share\"\r\n                                autoComplete=\"current-share\"\r\n                                type = 'number'\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={()=>{addShare(state.share);}}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n\r\nfunction TransitionsModal() {\r\n    const classes = useStyles();\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openShare, setOpenShare] = React.useState(false);\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleOpenShare = () => {\r\n        setOpenShare(true);\r\n    };\r\n\r\n    const handleCloseShare = () => {\r\n        setOpenShare(false);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button type=\"button\" onClick={handleOpen} color={\"inherit\"}>\r\n                Add Condition script\r\n            </Button>\r\n            <Button type=\"button\" onClick={handleOpenShare} color={\"inherit\"}>\r\n                Share Other's Condition Script\r\n            </Button>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={open}\r\n                onClose={handleClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={open}>\r\n                    <div className={classes.paper}>\r\n                        <AddCondition/>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n            <Modal\r\n                aria-labelledby=\"transition-modal-title\"\r\n                aria-describedby=\"transition-modal-description\"\r\n                className={classes.modal}\r\n                open={openShare}\r\n                onClose={handleCloseShare}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={openShare}>\r\n                    <div className={classes.paper}>\r\n                        <AddShare/>\r\n                    </div>\r\n                </Fade>\r\n            </Modal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function ScriptTools(){\r\n    return(\r\n        <TransitionsModal/>\r\n    )\r\n}","C:\\Users\\x1761\\Desktop\\refactoring\\demo_front\\my-app\\src\\components\\main\\addAction.jsx",["78"],"import React, {useEffect, useState} from \"react\";\r\nimport $ from \"jquery\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nconst useStylesForm = makeStyles((theme) => ({\r\n    paper: {\r\n        marginTop: theme.spacing(8),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n    },\r\n    avatar: {\r\n        margin: theme.spacing(1),\r\n        backgroundColor: theme.palette.secondary.main,\r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(3),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    }\r\n}));\r\nconst targets = [''];\r\nexport default function AddAction(props) {\r\n    const {type,script_id} = props;\r\n    const classes = useStylesForm();\r\n    const action_type = ['','CLOSE','OPEN','SWITCH_OFF','SWITCH_ON'];\r\n    const [gettarget,setGettarget] = useState(false);\r\n    const [state,setState] = useState({\r\n        action_type:'',\r\n        target:0\r\n    })\r\n    const handleChange = (event) => {\r\n        const name = event.target.name;\r\n        setState({\r\n            ...state,\r\n            [name]: event.target.value,\r\n        });\r\n    };\r\n    function getTargets(){\r\n        $.ajax({\r\n                url: \"api/getFurnitures\",\r\n                method:\"POST\",\r\n                data:{\r\n                    id:sessionStorage.getItem(\"id\")\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res){\r\n                        for(var i in res){\r\n                            targets.push(res[i]);\r\n                        }\r\n                    }\r\n                    setGettarget(true);\r\n                }\r\n            }\r\n        );\r\n    }\r\n    useEffect(()=>{\r\n        if(!gettarget){\r\n            getTargets();\r\n        }\r\n    })\r\n    function sendAction(){\r\n        $.ajax({\r\n                url: \"api/action\",\r\n                method:\"POST\",\r\n                data:{\r\n                    scriptId:script_id,\r\n                    actionType:state.action_type,\r\n                    target:state.target,\r\n                },\r\n                async:false,\r\n                success:function (res){\r\n                    if(res.success){\r\n                        alert('success');\r\n                    }else{\r\n                        alert(res.message);\r\n                    }\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n            <CssBaseline />\r\n            <div className={classes.paper}>\r\n                <Typography component=\"h1\" variant=\"h5\">\r\n                    Add Action\r\n                </Typography>\r\n                <form className={classes.form} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <FormControl className={classes.margin}>\r\n                            <InputLabel id=\"demo-customized-select-label\">Action type</InputLabel>\r\n                            <Select\r\n                                native\r\n                                value={state.furniture_type}\r\n                                onChange={handleChange}\r\n                                inputProps={{\r\n                                    name: 'action_type',\r\n                                    id: 'type-native-simple',\r\n                                }}\r\n                            >\r\n                                {\r\n                                    action_type.map(item=>(\r\n                                        <option value={item}>{item}</option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.margin}>\r\n                            <InputLabel id=\"demo-customized-select-label\">Target id</InputLabel>\r\n                            <Select\r\n                                native\r\n                                value={state.target}\r\n                                onChange={handleChange}\r\n                                inputProps={{\r\n                                    name: 'target',\r\n                                    id: 'target-native-simple',\r\n                                }}\r\n                            >\r\n                                {\r\n                                    targets.map(item=>(\r\n                                        <option value={item}>{item}</option>\r\n                                    ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Button\r\n                        type=\"submit\"\r\n                        fullWidth\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.submit}\r\n                        onClick={()=> {\r\n                            sendAction()\r\n                        }}\r\n                    >\r\n                        Add\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </Container>\r\n    );\r\n}\r\n",{"ruleId":"79","severity":1,"message":"80","line":13,"column":8,"nodeType":"81","messageId":"82","endLine":13,"endColumn":17},{"ruleId":"79","severity":1,"message":"83","line":14,"column":8,"nodeType":"81","messageId":"82","endLine":14,"endColumn":17},{"ruleId":"79","severity":1,"message":"84","line":16,"column":8,"nodeType":"81","messageId":"82","endLine":16,"endColumn":18},{"ruleId":"79","severity":1,"message":"85","line":3,"column":8,"nodeType":"81","messageId":"82","endLine":3,"endColumn":22},{"ruleId":"79","severity":1,"message":"86","line":4,"column":10,"nodeType":"81","messageId":"82","endLine":4,"endColumn":19},{"ruleId":"79","severity":1,"message":"87","line":5,"column":8,"nodeType":"81","messageId":"82","endLine":5,"endColumn":11},{"ruleId":"79","severity":1,"message":"88","line":8,"column":9,"nodeType":"81","messageId":"82","endLine":8,"endColumn":29},{"ruleId":"79","severity":1,"message":"89","line":1,"column":8,"nodeType":"81","messageId":"82","endLine":1,"endColumn":18},{"ruleId":"79","severity":1,"message":"90","line":16,"column":8,"nodeType":"81","messageId":"82","endLine":16,"endColumn":24},{"ruleId":"79","severity":1,"message":"91","line":10,"column":8,"nodeType":"81","messageId":"82","endLine":10,"endColumn":19},{"ruleId":"79","severity":1,"message":"92","line":11,"column":8,"nodeType":"81","messageId":"82","endLine":11,"endColumn":18},{"ruleId":"79","severity":1,"message":"93","line":12,"column":8,"nodeType":"81","messageId":"82","endLine":12,"endColumn":14},{"ruleId":"79","severity":1,"message":"94","line":36,"column":12,"nodeType":"81","messageId":"82","endLine":36,"endColumn":16},"no-unused-vars","'Container' is defined but never used.","Identifier","unusedVar","'PropTypes' is defined but never used.","'Background' is defined but never used.","'AccountBoxIcon' is defined but never used.","'positions' is defined but never used.","'Box' is defined but never used.","'createBrowserHistory' is defined but never used.","'Typography' is defined but never used.","'TextareaAutosize' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'type' is assigned a value but never used."]